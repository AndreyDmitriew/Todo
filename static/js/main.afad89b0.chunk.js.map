{"version":3,"sources":["context.js","Todo/TodoListItem/TodoListItem.js","Todo/TodoListItem/index.js","Todo/TodoList/TodoList.js","Todo/AddToDo/AddToDo.js","App.js","index.js"],"names":["Context","React","createContext","TodoListItem","todo","index","myOnChange","romoveTodo","useContext","console","log","classes","completed","push","className","join","type","onChange","id","checked","title","onClick","TodoList","props","todos","map","key","myOnToggle","AddToDo","myOnCreate","useState","value","setValue","onSubmit","event","preventDefault","trim","target","App","complited","setTodos","Provider","filter","concat","Date","now","length","ReactDOM","render","document","getElementById"],"mappings":"8SAIeA,G,kBAFCC,IAAMC,iBC8CPC,IC9CAA,EDMd,YAAoD,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WAC3BC,EAAeC,qBAAWR,GAA1BO,WACTE,QAAQC,IAAIN,GACZ,IAAMO,EAAU,GAMhB,OAJIP,EAAKQ,WACPD,EAAQE,KAAK,QAIf,wBAAIC,UAAU,cACZ,0BAAMA,UAAWH,EAAQI,KAAK,MAC5B,2BACEC,KAAK,WACLC,SAAW,kBAAMX,EAAWF,EAAKc,KACjCC,QAASf,EAAKQ,YAEhB,gCAASP,EAAQ,GAChBD,EAAKgB,OAGR,4BAAQC,QAAS,kBAAMd,EAAWH,EAAKc,MAAvC,OEAWI,MAtBf,SAAkBC,GAChB,OACE,wBAAIT,UAAU,WACXS,EAAMC,MAAMC,KAAK,SAACrB,EAAMC,GACvB,OAAO,kBAAC,EAAD,CAAcD,KAAMA,EAAMsB,IAAKtB,EAAKc,GAAIb,MAAOA,EAAOC,WAAYiB,EAAMI,kB,MCoBxEC,MA1Bf,YAAmC,IAAfC,EAAc,EAAdA,WAAc,EACNC,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,KAchC,OACE,0BAAMlB,UAAU,gBAAgBmB,SAZlC,SAAyBC,GACvBA,EAAMC,iBAEFJ,EAAMK,SACRP,EAAWE,GACXC,EAAS,OAQT,2BAAOD,MAAOA,EAAOd,SAAU,SAAAiB,GAAK,OAAEF,EAASE,EAAMG,OAAON,UAC5D,4BAAQf,KAAK,UAAb,cC+BSsB,MA/Cf,WAAgB,IAAD,EACarC,IAAM6B,SAAS,CACvC,CAACZ,GAAG,EAAGqB,WAAW,EAAOnB,MAAM,cAC/B,CAACF,GAAG,EAAGqB,WAAW,EAAOnB,MAAM,eAC/B,CAACF,GAAG,EAAGqB,WAAW,EAAOnB,MAAM,kBAJpB,mBACNI,EADM,KACCgB,EADD,KAiCb,OACE,kBAAC,EAAQC,SAAT,CAAkBV,MAAO,CAAExB,WAd7B,SAAoBW,GAClBsB,EAAShB,EAAMkB,QAAO,SAAAtC,GAAI,OAAIA,EAAKc,KAAOA,SAcxC,yBAAKJ,UAAU,WACb,6CACA,kBAAC,EAAD,CAASe,WAbf,SAAoBT,GAClBoB,EAAShB,EAAMmB,OAAO,CAAC,CACrBvB,QACAF,GAAI0B,KAAKC,MACTN,WAAW,SAYRf,EAAMsB,OAAS,kBAAC,EAAD,CAAUtB,MAAOA,EAAOG,WAhC9C,SAAsBT,GACpBsB,EACEhB,EAAMC,KAAI,SAAArB,GAIV,OAHMA,EAAKc,KAAOA,IACfd,EAAKQ,WAAaR,EAAKQ,WAEnBR,SA0BiE,2CCzC9E2C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.afad89b0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from 'react';\r\nimport propTypes from 'prop-types';\r\nimport './TodoListItem.css';\r\nimport Context from '../../context'\r\n\r\n\r\n\r\n\r\n function TodoListItem({ todo, index, myOnChange }) {\r\n   const { romoveTodo } = useContext(Context)\r\n  console.log(todo)\r\n  const classes = []\r\n\r\n  if (todo.completed) {\r\n    classes.push('done')\r\n  }\r\n\r\n  return (\r\n  <li className='itemStyles'> \r\n    <span className={classes.join(' ')}>\r\n      <input \r\n        type='checkbox' \r\n        onChange={ () => myOnChange(todo.id) } \r\n        checked={todo.completed}>\r\n      </input> \r\n      <strong>{index + 1}</strong> \r\n      {todo.title} \r\n    </span>\r\n\r\n    <button onClick={() => romoveTodo(todo.id)}>x</button>\r\n  </li>\r\n  )\r\n}\r\n// 1. Проброс от дочернего к родительскому. на нужный элемент в данном случае на input вешается слушатель onChange, как только произошло изменение\r\n// вызывается функия myOnChange с параметрами id нажатого элемента. Далее эту функцию пишем в параметры ф-ции ToDoListItem\r\n\r\n// 3. Проброс от родительского к дочернему. Принимаем св-ва и применяем их. Св-ва переданы. \r\n\r\n\r\n\r\n// validation check\r\nTodoListItem.propTypes = {\r\n  todo: propTypes.object.isRequired,\r\n  index: propTypes.number.isRequired,\r\n  myOnChange: propTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default TodoListItem","import TodoListItem from './TodoListItem';\r\n\r\nexport default TodoListItem;","import React from 'react';\r\nimport './TodoList.css';\r\nimport TodoListItem from '../TodoListItem'\r\nimport propTypes from 'prop-types'\r\n\r\n\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul className=\"ulStyle\">\r\n      {props.todos.map( (todo, index) => {\r\n        return <TodoListItem todo={todo} key={todo.id} index={index} myOnChange={props.myOnToggle}/>\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n// 2. Проброс от дочернего к родительскому. в теге <TodoListItem пишем ту же ф-цию myOnChange и в фигурных скобках в пропсы(для того что бы соединить с родителем) передаем придуманное название\r\n// функции - props.myOnToggle\r\n\r\n\r\n// 2. Проброс от родительского к дочернему. Далее в ф-ции TodoList пишем пареметр (название любое), далее перебирая каждый input (каждую надпись) мы \r\n// пробрасываем св-ва эл-ту TodoListItem т.к. каждый Item генерируется в отдельном компоненте. Пишем название св-ва и с-во которое хотим пробросить.\r\n\r\nTodoList.propTypes = {\r\n  todos: propTypes.arrayOf(propTypes.object).isRequired,\r\n  myOnToggle: propTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default TodoList","import React, {useState} from 'react';\r\nimport './AddToDo.css';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nfunction AddToDo ({ myOnCreate }) {\r\n  const [value, setValue] = useState('')\r\n\r\n  function mySubmitHandler(event) {\r\n    event.preventDefault()\r\n//с помощью метода trim() удаляются лишние пробелы\r\n    if (value.trim()) {\r\n      myOnCreate(value)\r\n      setValue('')\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <form className=\"addToDoStyles\" onSubmit={mySubmitHandler}>\r\n      <input value={value} onChange={event=>setValue(event.target.value)} />\r\n      <button type='submit'>Add text</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nAddToDo.propTypes = {\r\n  myOnCreate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddToDo","import React from 'react';\nimport './App.css';\nimport TodoList from './Todo/TodoList/TodoList';\nimport Context from './context'\nimport AddToDo from './Todo/AddToDo/AddToDo'\n\nfunction App() {    \n  const [todos, setTodos] = React.useState([\n    {id:1, complited: false, title:\"buy a milk\"},\n    {id:2, complited: false, title:\"buy a bread\"},\n    {id:3, complited: false, title:\"evening walk\"}\n   ])   \n\n\n  function myToggleToDo(id) {\n    setTodos( \n      todos.map(todo => {\n        if (todo.id === id) {\n         todo.completed = !todo.completed\n      }\n      return todo\n    })\n    )\n  }\n\n\n  function romoveTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function myAddToDo (title) {\n    setTodos(todos.concat([{\n      title,\n      id: Date.now(),\n      complited: false \n    }]))\n  }\n\n\n  return (\n    <Context.Provider value={{ romoveTodo }}>\n      <div className='wrapper'>\n        <h1>React toDoApp</h1>\n        <AddToDo myOnCreate={myAddToDo}/>\n        \n\n        {todos.length ? <TodoList todos={todos} myOnToggle={myToggleToDo}/> : <p>No todos!</p>}  \n\n      </div>\n    </Context.Provider>\n  )\n}\n\nexport default App;\n\n// 3. Проброс от дочернего к родительскому. Теперь в фигурных скобках к придуманной ф-ции а тут параметру myOnToggle записываем название ф-ции которую напишем в \n// теле родителя. т.е. ту которую вызывали. \n\n// 1. Что бы передать значение от родителя к дочернему компоненту см. на примере - todos. В свойство эл-та TodoList в придуманное со-во todos передаем \n// массив называемый так-же todos\n\n//Что бы пробросить эл-т без этапов (цепочек) используют Context.Provider, он подклчается в import, далее весь return оборачивается в Context.Provider\n//и когда в дочернем компоненте (TodoListItem (там он тоже подключон в import)) срабатывает onClick на кнопке, вызывается ф-ция romoveTodo и в нее пере-\n//дается id, то в этот компонент передается вызов этой ф-ции здесь она объявлена и здесь она срабатывает","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}